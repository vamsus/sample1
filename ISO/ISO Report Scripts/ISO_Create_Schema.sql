/*
DROP TABLE VW_MIS_QUOTE_POLICIES;
DROP TABLE VW_MIS_LOB_CI;
DROP TABLE VW_MIS_LOCATIONS;
DROP TABLE VW_MIS_ADDRESSES;
DROP TABLE VW_MIS_C_CI_BUILDINGS;
DROP TABLE VW_MIS_C_CI_DEDCUTIBLE;
DROP TABLE RT_MIS_CI_ALL_COVERAGES;
DROP TABLE VW_MIS_C_CI_IRPM;
DROP TABLE POLICY_REGISTER;
*/

USE master;

IF EXISTS (
	SELECT name FROM master.dbo.sysdatabases WHERE name = N'ISO_REPORT'
)
BEGIN
	PRINT 'Database Name already Exist';
END
ELSE
BEGIN
   CREATE DATABASE ISO_REPORT;
   PRINT 'New Database is Created';
END
GO
USE ISO_REPORT;
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE SP_ISO_Table_Creation AS
BEGIN
SET NOCOUNT ON;

IF OBJECT_ID(N'dbo.VW_MIS_QUOTE_POLICIES', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_QUOTE_POLICIES Table Exists';
			DELETE FROM VW_MIS_QUOTE_POLICIES;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_QUOTE_POLICIES (
			 GID FLOAT
			,DISPLAY_POLICY_NUMBER NVARCHAR(128)
			,EFFECTIVE_DATE datetime
			,TRANS_EFFECTIVE_DATE datetime
			,TRANS_ACCOUNTING_DATE datetime
			,EXPIRATION_DATE datetime
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,COMPANY_CODE NVARCHAR(2)
			,COMPANY_NAME NVARCHAR(128)
			,REVISION_NUMBER FLOAT
			,BOOKING_STATUS NVARCHAR(32)
			,DATE_MODIFIED datetime
			,TRANSACTION_ACTION NVARCHAR(128)
			,TRANSACTION_CODE NVARCHAR(8)
			,CANCEL_DESCRIPTION NVARCHAR(4000)
			,CANCEL_METHOD_DESC NVARCHAR(256)
			,C_SUBMISSION_TYPE NVARCHAR(5)
			,RENEWAL_INDICATOR NVARCHAR(5)
			,IS_REWRITE NVARCHAR(5)
			);
			PRINT 'VW_MIS_QUOTE_POLICIES Created';
		END

IF OBJECT_ID(N'dbo.VW_MIS_LOB_CI', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_LOB_CI Table Exists';
			DELETE FROM VW_MIS_LOB_CI;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_LOB_CI (
			 GID FLOAT
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,C_PROP_TYPE NVARCHAR(128)
			,C_PROP_TYPE_CODE NVARCHAR(3)
			,C_CLASS_TYPE NVARCHAR(256)
			,C_ASSOCIATION_TYPE NVARCHAR(75)
			,C_IS_MODIFIER NVARCHAR(1)
			,C_IS_TERRORISM NVARCHAR(1)
			,POLICY_LOB_CI FLOAT
			,C_IS_SINKHOLE NVARCHAR(2)
			);
			PRINT 'VW_MIS_LOB_CI Created';
		END

IF OBJECT_ID(N'dbo.VW_MIS_LOCATIONS', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_LOCATIONS Table Exists';
			DELETE FROM VW_MIS_LOCATIONS;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_LOCATIONS (
			 GID FLOAT
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,LOCATION_NO FLOAT
			,C_LOB_LOCATIONS FLOAT
			,FK_COLUMN_NAME NVARCHAR(64)
			,C_PROTECTION_CLASS NVARCHAR(5)
			,TERRITORY_CODE NVARCHAR(16)
			);
			PRINT 'VW_MIS_LOCATIONS Created';
		END

IF OBJECT_ID(N'dbo.VW_MIS_ADDRESSES', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_ADDRESSES Table Exists';
			DELETE FROM VW_MIS_ADDRESSES;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_ADDRESSES (
			 GID FLOAT
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,CITY NVARCHAR(128)
			,STATE_CODE NVARCHAR(2)	----		
			,COUNTY NVARCHAR(40)
			,ZIPCODE NVARCHAR(32)
			,FK_COLUMN_NAME NVARCHAR(64)
			,FK_COLUMN_VALUE FLOAT
			);
			PRINT 'VW_MIS_ADDRESSES Created';
		END

IF OBJECT_ID(N'dbo.VW_MIS_C_CI_BUILDINGS', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_C_CI_BUILDINGS Table Exists';
			DELETE FROM VW_MIS_C_CI_BUILDINGS;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_C_CI_BUILDINGS (
			 GID FLOAT
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,C_BUILDING_NO FLOAT
			,C_BUILDING_DESC NVARCHAR(4000)
			,C_BUILT_YEAR NVARCHAR(38)
			,C_EFFCTIVE_YEAR NVARCHAR(38)
			,C_BCEG_CODE NVARCHAR(10)
			,C_CONSTRUCTION NVARCHAR(500)
			,C_NO_OF_STORIES FLOAT
			,C_BUILD_SPRINK_YN NVARCHAR(4)
			,C_LOB_BUILDINGS FLOAT
			,C_BUILDING_LOCATION_ID FLOAT
			);
			PRINT 'VW_MIS_C_CI_BUILDINGS Created';
		END

IF OBJECT_ID(N'dbo.VW_MIS_C_CI_DEDCUTIBLE', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_C_CI_DEDCUTIBLE Table Exists';
			DELETE FROM VW_MIS_C_CI_DEDCUTIBLE;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_C_CI_DEDCUTIBLE (
			 GID FLOAT
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,C_AOP_DEDUCTIBLE	FLOAT
			,C_DEDUCTIBLE_USD	FLOAT
			,C_DEDUCTIBLE_PERCENT	FLOAT
			,C_PREMISES_DEDUCTIBLES FLOAT
			,FK_COLUMN_NAME NVARCHAR(64) 
			);
			PRINT 'VW_MIS_C_CI_DEDCUTIBLE Created';
		END

IF OBJECT_ID(N'dbo.RT_MIS_CI_ALL_COVERAGES', N'U') IS NOT NULL
		BEGIN
			PRINT 'RT_MIS_CI_ALL_COVERAGES Table Exists';
			DELETE FROM RT_MIS_CI_ALL_COVERAGES;
		END
	ELSE
		BEGIN
			CREATE TABLE RT_MIS_CI_ALL_COVERAGES (
			 GID FLOAT
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,Coverage NVARCHAR(2000)
			,Coverage_Code NVARCHAR(150)
			,Peril NVARCHAR(2000)
			,Transaction_Premium FLOAT
			,Written_Premium FLOAT
			,Limit FLOAT
			,Location_No FLOAT
			,Building_No FLOAT
			);
			PRINT 'RT_MIS_CI_ALL_COVERAGES Created';
		END

IF OBJECT_ID(N'dbo.VW_MIS_C_CI_IRPM', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_C_CI_IRPM Table Exists';
			DELETE FROM VW_MIS_C_CI_IRPM;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_C_CI_IRPM (
			 GID FLOAT
			,ENTITY_REFERENCE NVARCHAR(64)
			,ENTITY_TYPE NVARCHAR(64)
			,C_IRPM_TOT_MODIFIER FLOAT
			,C_LOB_CI_IRPM FLOAT
			,C_CURRENT_RATE FLOAT
			);
			PRINT 'VW_MIS_C_CI_IRPM Created';
		END

IF OBJECT_ID(N'dbo.POLICY_REGISTER', N'U') IS NOT NULL
		BEGIN
			PRINT 'POLICY_REGISTER Table Exists';
			DELETE FROM POLICY_REGISTER;
		END
	ELSE
		BEGIN
			CREATE TABLE POLICY_REGISTER (
			 POLICY_NO NVARCHAR(50)
			,Cancellation_Date DATETIME
			,Cancellation_Type NVARCHAR(20)
			,Cancellation_Reason NVARCHAR(40)
			,Cancellation_Method NVARCHAR(10)
			);
			PRINT 'POLICY_REGISTER Created';
		END
		
IF OBJECT_ID(N'dbo.VW_MIS_C_COV_CI_RATING_DETAILS', N'U') IS NOT NULL
		BEGIN
			PRINT 'VW_MIS_C_COV_CI_RATING_DETAILS Table Exists';
			DELETE FROM VW_MIS_C_COV_CI_RATING_DETAILS;
		END
	ELSE
		BEGIN
			CREATE TABLE VW_MIS_C_COV_CI_RATING_DETAILS (
			 ENTITY_REFERENCE NVARCHAR(64)
			,C_COVERAGE_DESC NVARCHAR(128)
			,C_COVERAGE NVARCHAR(128)
			,C_PERIL NVARCHAR(128)
			,C_WLM_FACTOR FLOAT
			,FK_COLUMN_NAME NVARCHAR(64)
			,FK_COLUMN_VALUE FLOAT
			);
			PRINT 'VW_MIS_C_COV_CI_RATING_DETAILS Created';
		END

	IF OBJECT_ID(N'dbo.CUSTOM_LOSSPAID', N'U') IS NOT NULL
		BEGIN
			PRINT 'CUSTOM_LOSSPAID Table Exists';
			DELETE FROM dbo.CUSTOM_LOSSPAID;
		END
	ELSE
		BEGIN
			CREATE TABLE CUSTOM_LOSSPAID (
				CLAIM_ID NVARCHAR(22), 
				CLAIM_NO NVARCHAR(50), 
				FEATURE_ID NVARCHAR(22), 
				FEATURE_NO NVARCHAR(30), 
				COVERAGE_ID NVARCHAR(22), 
				ACTIVITY_CODE NVARCHAR(50), 
				ACTIVITY_TYPE NVARCHAR(50), 
				ALLOCATED FLOAT, 
				PAID FLOAT, 
				RECOVERED FLOAT, 
				CHECK_ID NVARCHAR(22), 
				DED_AMOUNT FLOAT, 
				TRANSACTION_DATE DATETIME, 
				LOSS_DATE DATETIME, 
				REPORTED_DATE DATETIME, 
				CAUSE_OF_LOSS NVARCHAR(50), 
				COMPANY NVARCHAR(50),
				COMPANY_NAME NVARCHAR(128), 
				STATE NVARCHAR(50),
				C_PROP_TYPE_CODE NVARCHAR(3),
				C_PROP_TYPE NVARCHAR(128),
				COVERAGE_CODE NVARCHAR(100),
				POLICY_NO NVARCHAR(50),
				ZIP_CODE NVARCHAR(20),
				COUNTY NVARCHAR(60),
				CITY NVARCHAR(50),
				INCEPTION_DATE DATETIME,
				REPORT_DATE DATETIME
			);
			PRINT 'CUSTOM_LOSSPAID Created';
		END

	IF OBJECT_ID(N'dbo.CUSTOM_LOSSRESERVES', N'U') IS NOT NULL
		BEGIN
			PRINT 'CUSTOM_LOSSRESERVES Table Exists';
			DELETE FROM dbo.CUSTOM_LOSSRESERVES;
		END
	ELSE
		BEGIN
			CREATE TABLE CUSTOM_LOSSRESERVES (
				CLAIM_ID NVARCHAR(22), 
				CLAIM_NO NVARCHAR(50), 
				FEATURE_ID NVARCHAR(22), 
				FEATURE_NO NVARCHAR(30), 
				COVERAGE_ID NVARCHAR(22), 
				ACTIVITY_CODE NVARCHAR(50), 
				ACTIVITY_TYPE NVARCHAR(50), 
				ALLOCATED MONEY, 
				PAID FLOAT, 
				RECOVERED FLOAT, 
				CHECK_ID NVARCHAR(22), 
				DED_AMOUNT FLOAT, 
				TRANSACTION_DATE DATETIME, 
				LOSS_DATE DATETIME, 
				REPORTED_DATE DATETIME, 
				CAUSE_OF_LOSS NVARCHAR(50), 
				COMPANY NVARCHAR(50),
				COMPANY_NAME NVARCHAR(128), 
				STATE NVARCHAR(50),
				C_PROP_TYPE_CODE NVARCHAR(3),
				C_PROP_TYPE NVARCHAR(128),
				COVERAGE_CODE NVARCHAR(100),
				POLICY_NO NVARCHAR(50),
				ZIP_CODE NVARCHAR(20),
				COUNTY NVARCHAR(60),
				CITY NVARCHAR(50),
				INCEPTION_DATE DATETIME,
				REPORT_DATE DATETIME
			);
			PRINT 'CUSTOM_LOSSRESERVES Created';
		END

	IF OBJECT_ID(N'dbo.CUSTOM_SALVAGE', N'U') IS NOT NULL
		BEGIN
			PRINT 'CUSTOM_SALVAGE Table Exists';
			DELETE FROM dbo.CUSTOM_SALVAGE;
		END
	ELSE
		BEGIN
			CREATE TABLE CUSTOM_SALVAGE (
				CLAIM_ID NVARCHAR(22), 
				CLAIM_NO NVARCHAR(50), 
				FEATURE_ID NVARCHAR(22), 
				FEATURE_NO NVARCHAR(30), 
				COVERAGE_ID NVARCHAR(22), 
				ACTIVITY_CODE NVARCHAR(50), 
				ACTIVITY_TYPE NVARCHAR(50), 
				ALLOCATED FLOAT, 
				PAID FLOAT, 
				RECOVERED FLOAT, 
				CHECK_ID NVARCHAR(22), 
				DED_AMOUNT FLOAT, 
				TRANSACTION_DATE DATETIME, 
				LOSS_DATE DATETIME, 
				REPORTED_DATE DATETIME, 
				CAUSE_OF_LOSS NVARCHAR(50), 
				COMPANY NVARCHAR(50),
				COMPANY_NAME NVARCHAR(128), 
				STATE NVARCHAR(50),
				C_PROP_TYPE_CODE NVARCHAR(3),
				C_PROP_TYPE NVARCHAR(128),
				COVERAGE_CODE NVARCHAR(100),
				POLICY_NO NVARCHAR(50),
				ZIP_CODE NVARCHAR(20),
				COUNTY NVARCHAR(60),
				CITY NVARCHAR(50),
				INCEPTION_DATE DATETIME,
				REPORT_DATE DATETIME
			);
			PRINT 'CUSTOM_SALVAGE Created';
		END

	IF OBJECT_ID(N'dbo.ISO_Tx_Final', N'U') IS NOT NULL
		BEGIN
			PRINT 'ISO_Tx_Final Table Exists';
			DELETE FROM dbo.ISO_Tx_Final;
		END
	ELSE
		BEGIN
			CREATE TABLE ISO_Tx_Final (
				DATACELL VARCHAR(Max)
			);
			PRINT 'ISO_Tx_Final Created';
		END

	IF OBJECT_ID(N'dbo.ISO_Non_Tx_Final', N'U') IS NOT NULL
		BEGIN
			PRINT 'ISO_Non_Tx_Final Table Exists';
			DELETE FROM dbo.ISO_Non_Tx_Final;
		END
	ELSE
		BEGIN
			CREATE TABLE ISO_Non_Tx_Final (
				DATACELL VARCHAR(Max)
			);
			PRINT 'ISO_Non_Tx_Final Created';
		END
END
GO

CREATE FUNCTION dbo.Stat_Reporting_Company_Conversion
    ( @company VARCHAR(10))
RETURNS VARCHAR(4)
AS
BEGIN
    DECLARE @returnValue NVARCHAR(4);

    SET @returnValue = CASE
                            WHEN LEFT(@company, 4) = 'ASIC' THEN '3369'
                            WHEN LEFT(@company, 4) = 'ASIA' THEN '3480'
                            WHEN LEFT(@company, 4) = 'ASIP' THEN '3487'
                            WHEN LEFT(@company, 4) = 'ASIL' THEN '3424'
                            WHEN LEFT(@company, 3) = 'ARK' THEN '3488'
                            WHEN LEFT(@company, 4) IN ('HPIC', 'ACAH') THEN '3257'
                            WHEN LEFT(@company, 4) IN ('ACAP', 'ACAC') THEN '3491'
                            WHEN LEFT(@company, 4) = 'ASIS' THEN '3511'
                            WHEN LEFT(@company, 6) = 'PPICFL' THEN '3488'
                            ELSE '0000'
                        END;

    RETURN @returnValue;
END;
GO

CREATE FUNCTION [dbo].[Stat_Reporting_Numeric_Conversion] (@fieldLength tinyInt, @fieldValue bigInt) 
RETURNS NVARCHAR(30)
AS
BEGIN
DECLARE @fieldConversion NVARCHAR(30)
DECLARE @lastValue NVARCHAR(1)
DECLARE @firstPart NVARCHAR(30)
DECLARE @returnValue NVARCHAR(30)

SET @lastValue = 
CASE WHEN @fieldValue < 0  THEN 
	CASE WHEN RIGHT(@fieldValue,1) = '0' THEN '}'
	     WHEN RIGHT(@fieldValue,1) = '1' THEN 'J'
		 WHEN RIGHT(@fieldValue,1) = '2' THEN 'K'
		 WHEN RIGHT(@fieldValue,1) = '3' THEN 'L'
		 WHEN RIGHT(@fieldValue,1) = '4' THEN 'M'
		 WHEN RIGHT(@fieldValue,1) = '5' THEN 'N'
		 WHEN RIGHT(@fieldValue,1) = '6' THEN 'O'
		 WHEN RIGHT(@fieldValue,1) = '7' THEN 'P'
		 WHEN RIGHT(@fieldValue,1) = '8' THEN 'Q'
		 WHEN RIGHT(@fieldValue,1) = '9' THEN 'R'
		 ELSE '?'
	END
ELSE
	RIGHT(@fieldValue,1)
END
SET @firstPart = LEFT(ABS(@fieldValue),LEN(ABS(@fieldValue))-1)
SET @fieldConversion = @firstPart + @lastValue
SET @returnValue = REPLICATE('0',@fieldLength-LEN(@fieldConversion))+CONVERT(VARCHAR,@fieldConversion)

RETURN @returnValue

END
GO

CREATE FUNCTION [dbo].[Stat_Reporting_Date_Conversion] (@date smalldatetime,@fieldsize tinyint )
RETURNS VARCHAR(4)
AS
BEGIN

DECLARE @returnValue NVARCHAR(4)
DECLARE @month tinyint
DECLARE @year int

SET @returnValue = CASE WHEN @fieldsize = 4 THEN CONCAT(dbo.Stat_Reporting_Numeric_Conversion(2,MONTH(@date)),RIGHT(@date,2))
						WHEN @fieldsize = 3 THEN CONCAT(CASE WHEN MONTH(@date) < 10 THEN CONVERT(Varchar(1),MONTH(@date)) 
															 WHEN MONTH(@date) = 10 THEN '0'
															 WHEN MONTH(@date) = 11 THEN '-'
															 ELSE '&' END,RIGHT(YEAR(@date),2))
						WHEN @fieldsize = 2 THEN CONCAT(CASE WHEN MONTH(@date) IN(1,2,3) THEN '3' 
															 WHEN MONTH(@date) IN(4,5,6) THEN '6'
															 WHEN MONTH(@date) IN(7,8,9) THEN '9'
															 ELSE '&' END,RIGHT(YEAR(@date),1))
					END


RETURN @returnValue

END
GO
EXEC SP_ISO_Table_Creation
GO



	
